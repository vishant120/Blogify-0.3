<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile | Blogifyer</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    :root {
      --primary: #1abc9c;
      --secondary: #34495e;
      --danger: #e74c3c;
      --success: #2ecc71;
      --profile-bg: #232c3e;
      --card-bg: #2c3e50;
      --border: #34495e;
      --text-main: #ecf0f1;
      --text-dim: #b2becd;
      --shadow: 0 4px 20px 0 rgba(31, 38, 135, 0.15);
      --hover-bg: #20252a;
    }
    body {
      background: linear-gradient(120deg, #181c20 0%, #202d3d 100%);
      color: var(--text-main);
      margin: 0;
      font-family: 'Segoe UI', Arial, sans-serif;
      min-height: 100vh;
    }
    .container {
      max-width: 900px;
      margin: 2.5rem auto 1rem;
      padding: 2.2rem 2rem 2.2rem;
      background: var(--profile-bg);
      border-radius: 1.2rem;
      box-shadow: var(--shadow);
    }
    .profile-header {
      display: flex;
      align-items: center;
      gap: 2.2rem;
      margin-bottom: 2.2rem;
      perspective: 1000px;
    }
    .profile-avatar-wrapper {
      transition: transform 0.5s;
      transform-style: preserve-3d;
      position: relative;
      width: 120px;
      height: 120px;
    }
    .profile-avatar-wrapper:hover {
      transform: rotateY(180deg);
    }
    .profile-avatar-front,
    .profile-avatar-back {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      border-radius: 50%;
      box-shadow: 0 2px 12px rgba(0,0,0,0.19);
    }
    .profile-avatar-front {
      transform: rotateY(0deg);
    }
    .profile-avatar-back {
      transform: rotateY(180deg);
      background: var(--primary);
      color: var(--text-main);
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
      font-size: 1rem;
      font-weight: bold;
      border: 4px solid var(--secondary);
    }
    .profile-avatar {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      border: 4px solid var(--primary);
      object-fit: cover;
      background: #14171a;
    }
    .profile-details {
      flex: 1;
    }
    .profile-details h2 {
      font-size: 2rem;
      font-weight: 600;
      margin: 0 0 0.1em 0;
      color: var(--primary);
      letter-spacing: 1px;
    }
    .profile-details p {
      margin: 0.25em 0;
      color: var(--text-main);
      font-size: 1.08rem;
    }
    .profile-details .bio {
      color: var(--text-dim);
      font-style: italic;
      font-size: 1rem;
    }
    .profile-details .fstats {
      margin-top: 0.6em;
      font-size: 1rem;
      color: var(--text-main);
      display: flex;
      gap: 1.3em;
    }
    .profile-details .fstats span {
      cursor: pointer;
      color: var(--primary);
      text-decoration: underline dotted;
      outline: none;
    }
    .profile-actions {
      display: flex;
      gap: 1.2rem;
      margin-bottom: 2rem;
    }
    .follow-btn {
      padding: 0.6rem 1.4rem;
      border: none;
      border-radius: 6px;
      font-size: 1.03rem;
      background: var(--success);
      color: var(--text-main);
      font-weight: 600;
      cursor: pointer;
      transition: background 0.23s, transform 0.16s;
      display: flex;
      align-items: center;
      gap: 0.55em;
    }
    .follow-btn.following {
      background: var(--danger);
    }
    .follow-btn.cancel {
      background: var(--danger);
    }
    .follow-btn.requested {
      background: #bdc3c7;
      cursor: not-allowed;
    }
    .follow-btn:hover { background: #219653; transform: scale(1.04); }
    .follow-btn.following:hover { background: #c0392b; }
    .follow-btn.cancel:hover { background: #c0392b; }
    /* Popups and Modals */
    .popup, .modal {
      display: none;
      position: fixed;
      bottom: 0;
      left: 50%;
      transform: translate(-50%, 100%);
      width: 100%;
      max-width: 350px;
      height: auto;
      max-height: 500vh;
      overflow-y: auto;
      background: var(--card-bg);
      padding: 2.2rem 1.2rem 1.2rem;
      border-top-left-radius: 1rem;
      border-top-right-radius: 1rem;
      box-shadow: 0 -15px 40px rgba(0,0,0,0.28);
      z-index: 2200;
      transition: transform 0.4s cubic-bezier(0.5,1.6,0.4,0.9);
    }
    .popup.active, .modal.active {
      display: block;
      transform: translate(-50%, 0);
    }
    .popup h3, .modal h3 {
      margin-top: 0;
      color: var(--primary);
      margin-bottom: 1.2rem;
      font-size: 1.25rem;
      letter-spacing: .5px;
    }
    .popup .close-btn, .modal .close-btn {
      position: absolute;
      top: 14px;
      right: 18px;
      background: none;
      border: none;
      color: var(--text-main);
      font-size: 1.33rem;
      cursor: pointer;
      transition: color 0.2s;
    }
    .popup .close-btn:hover, .modal .close-btn:hover {
      color: var(--danger);
    }
    .popup-list-user {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
      padding: 0.5rem 0;
      border-bottom: 1px solid var(--border);
    }
    .popup-list-user:last-child {
      border-bottom: none;
    }
    .popup-list-user img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      background: #181c20;
    }
    .popup-list-user a {
      color: var(--primary);
      text-decoration: none;
      font-size: 1.07rem;
      font-weight: 500;
      transition: text-decoration 0.15s;
    }
    .popup-list-user a:hover {
      text-decoration: underline;
    }
    .popup-overlay {
      display: none;
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,.48);
      z-index: 2000;
    }
    .overlay-transparent {
      background: transparent !important;
    }
    .followers-popup, .following-popup {
      left: 0;
      width: 100%;
      max-width: 100%;
      height: 80vh;
      max-height: 80vh;
      transform: translate(0, 100%);
      background: #252b3f;
      border-radius: 0;
      padding: 2.2rem 1.2rem 1.2rem;
    }
    .followers-popup.active, .following-popup.active {
      transform: translate(0, 0);
    }
    .likes-modal, .comments-modal {
      max-width: 800px;
      height: 500px;
      background: #252b3f;
    }
    .blogs-section {
      margin-top: 2.2rem;
    }
    .blogs-section h2 {
      color: var(--primary);
      font-size: 1.3rem;
      margin-bottom: 1.1rem;
      letter-spacing: 1px;
      font-weight: 600;
    }
    .blogs-list {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    .blog-card {
      background: var(--card-bg);
      border-radius: 1.2rem;
      box-shadow: var(--shadow);
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      border: 1.5px solid var(--border);
      position: relative;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .blog-card:hover {
      transform: translateY(-3px) scale(1.01);
      box-shadow: 0 12px 30px rgba(26, 188, 156, 0.08);
      border-color: var(--primary);
    }
    .blog-cover {
      border-radius: 9px;
      max-height: 270px;
      width: 100%;
      object-fit: cover;
      margin-bottom: 1.2rem;
      border: 1px solid var(--border);
      background: #191919;
    }
    .author-section {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 0.6rem;
    }
    .author-img {
      width: 43px;
      height: 43px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--primary);
      background: #0d0f12;
    }
    .author-details {
      display: flex;
      flex-direction: column;
    }
    .author-details a {
      color: var(--primary);
      font-weight: 600;
      text-decoration: none;
    }
    .author-details a:hover {
      text-decoration: underline;
    }
    .blog-title {
      font-size: 1.45rem;
      font-weight: bold;
      margin-bottom: 0.3rem;
      line-height: 1.2;
      color: var(--primary);
    }
    .blog-title a {
      color: inherit;
      text-decoration: none;
      transition: color 0.2s;
    }
    .blog-title a:hover {
      color: #16a085;
    }
    .blog-meta {
      color: var(--text-dim);
      font-size: 0.91rem;
      margin-bottom: 1rem;
      display: flex;
      gap: 1rem;
      align-items: center;
    }
    .blog-excerpt {
      color: var(--text-dim);
      font-size: 1.05rem;
      margin-bottom: 1.2rem;
      line-height: 1.7;
    }
    .blog-excerpt a {
      color: var(--primary);
      text-decoration: none;
    }
    .blog-excerpt a:hover {
      text-decoration: underline;
    }
    .blog-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 0.7rem;
      margin-top: 0.5rem;
      align-items: center;
    }
    .action-btn, .comments-btn, .likes-btn {
      border: none;
      outline: none;
      border-radius: 6px;
      padding: 0.47rem 1.13rem;
      font-size: 1rem;
      cursor: pointer;
      color: var(--text-main);
      background: var(--primary);
      display: flex;
      align-items: center;
      gap: 0.4rem;
      transition: background 0.2s, transform 0.2s;
    }
    .action-btn.liked {
      background: var(--danger);
    }
    .action-btn:hover,
    .comments-btn:hover,
    .likes-btn:hover {
      background: #16a085;
      transform: scale(1.05);
    }
    .likes-preview, .comments-preview {
      padding: 0.47rem 1.13rem;
      border-radius: 6px;
      background: var(--hover-bg);
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.4rem;
      color: var(--text-dim);
      font-size: 0.95rem;
      transition: background 0.2s, transform 0.2s;
    }
    .likes-preview:hover, .comments-preview:hover {
      background: var(--primary);
      color: var(--text-main);
      transform: scale(1.05);
    }
    .likes-preview a, .comments-preview a {
      color: inherit;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 0.3rem;
    }
    .likes-preview a:hover, .comments-preview a:hover {
      text-decoration: underline;
    }
    /* 3-dots menu */
    .blog-menu, .comment-menu {
      position: absolute;
      top: 10px;
      right: 10px;
      z-index: 10;
    }
    .dots-btn {
      background: none;
      border: none;
      color: var(--text-dim);
      font-size: 1.5rem;
      cursor: pointer;
      padding: 0.2rem 0.5rem;
      transition: color 0.2s;
    }
    .dots-btn:hover {
      color: var(--primary);
    }
    .dropdown-menu {
      display: none;
      position: absolute;
      top: 25px;
      right: 0;
      background: var(--card-bg);
      border: 1px solid var(--border);
      border-radius: 0.5rem;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 1000;
      min-width: 160px;
      padding: 0.5rem 0;
    }
    .dropdown-menu.active {
      display: block;
    }
    .dropdown-menu button, .dropdown-menu a {
      display: block;
      width: 100%;
      padding: 0.5rem 1rem;
      background: none;
      border: none;
      color: var(--text-main);
      text-align: left;
      cursor: pointer;
      transition: background 0.2s;
      text-decoration: none;
    }
    .dropdown-menu button:hover, .dropdown-menu a:hover {
      background: var(--hover-bg);
    }
    .dropdown-menu .delete-btn {
      color: var(--danger);
    }
    /* Modals Styles */
    .modal .close-btn {
      font-size: 1.33rem;
      top: 14px;
    }
    .modal .close-btn i {
      font-size: 1.33rem;
    }
    .comment-block, .like-block {
      display: flex;
      align-items: flex-start;
      gap: 1.1rem;
      margin-bottom: 1.2rem;
      background: var(--hover-bg);
      border-radius: 8px;
      padding: 1rem 1.1rem;
      position: relative;
    }
    .comment-block img, .like-block img {
      width: 42px;
      height: 42px;
      border-radius: 50%;
      object-fit: cover;
      background: #111;
    }
    .comment-content, .like-content {
      flex: 1;
      min-width: 0;
    }
    .like-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
    }
    .comment-author, .like-author {
      font-weight: bold;
      color: var(--primary);
      margin-bottom: 0.2rem;
    }
    .like-author a {
      color: inherit;
      text-decoration: none;
    }
    .like-author a:hover {
      text-decoration: underline;
    }
    .comment-text {
      color: var(--text-dim);
      margin-bottom: 0.3rem;
      word-break: break-word;
    }
    .comment-time {
      font-size: 0.85rem;
      color: var(--text-dim);
      display: flex;
      align-items: center;
      gap: 0.3rem;
    }
    .comment-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: 0.5rem;
    }
    .comment-action-btn {
      background: none;
      border: none;
      color: var(--text-dim);
      font-size: 0.9rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.3rem;
    }
    .comment-action-btn.liked {
      color: var(--danger);
    }
    .comment-reply-form {
      margin-top: 1rem;
      background: var(--card-bg);
      padding: 1rem;
      border-radius: 8px;
    }
    .comment-replies {
      margin-top: 1rem;
      padding-left: 2rem;
      border-left: 2px solid var(--border);
    }
    .comments-modal {
      display: flex;
      flex-direction: column;
      padding-bottom: 0;
    }
    .comments-container {
      flex: 1 1 auto;
      overflow-y: auto;
      padding-bottom: 1.2rem;
    }
    .post-comment-form {
      border-top: 1px solid var(--border);
      padding: 1rem 1.2rem;
      background: var(--card-bg);
    }
    @media (max-width: 900px) {
      .container { padding: 1.2rem 0.4rem; }
      .profile-header { gap: 1rem; }
      .blog-card { flex-direction: column; gap: 0.7rem; min-height: unset; }
      .blog-cover { width: 100%; height: 145px; margin: 0 0 1rem 0; }
    }
    @media (max-width: 600px) {
      .container { padding: 0.4rem 0.1rem; }
      .profile-header { flex-direction: column; align-items: flex-start; gap: 1.2rem; }
      .profile-avatar { width: 80px; height: 80px; }
      .blogs-section { margin-top: 1.2rem; }
      .blog-card { flex-direction: column; gap: 0.5rem; }
      .blog-cover { min-width: 100%; max-width: 100%; height: 140px; }
      .blog-menu { right: 10px; top: 10px; }
      .post-comment-form {
        position: sticky;
        bottom: 0;
        z-index: 1;
        background: #000;
        margin: 0 -1rem -1rem -1rem;
        padding: 1rem;
        border-top: 1px solid var(--border);
      }
    }
    @media (min-width: 601px) {
      .popup:not(.followers-popup):not(.following-popup), .modal {
        bottom: 0;
        transform: translate(-50%, 100%);
      }
      .popup:not(.followers-popup):not(.following-popup).active, .modal.active {
        transform: translate(-50%, 0);
      }
      .popup:not(.followers-popup):not(.following-popup), .modal {
        border-radius: 1rem;
      }
      .followers-popup, .following-popup {
        bottom: 0;
        transform: translate(0, 100%);
      }
      .followers-popup.active, .following-popup.active {
        transform: translate(0, 0);
      }
    }
  </style>
</head>
<body>
  <%- include('partials/header', { user }) %>
  <div class="container">
    <% if (success_msg) { %>
      <div class="alert alert-success"><i class="fas fa-check-circle"></i> <%= success_msg %></div>
    <% } %>
    <% if (error_msg) { %>
      <div class="alert alert-error"><i class="fas fa-exclamation-circle"></i> <%= error_msg %></div>
    <% } %>
    <% if (profileUser) { %>
      <div class="profile-header">
        <div class="profile-avatar-wrapper">
          <div class="profile-avatar-front">
            <img class="profile-avatar" src="<%= profileUser.profileImageURL || '/default-profile.png' %>" alt="<%= profileUser.fullname %>'s Profile Image">
          </div>
          <div class="profile-avatar-back">
            <%= profileUser.fullname %>
          </div>
        </div>
        <div class="profile-details">
          <h2><%= profileUser.fullname %></h2>
          <p class="bio"><i class="fas fa-info-circle"></i> <%= profileUser.bio || 'No bio provided.' %></p>
          <% if (canViewContent) { %>
            <div class="fstats">
              <span class="followers-toggle" tabindex="0" aria-label="View Followers">
                Followers: <%= profileUser.followers?.length || 0 %>
              </span>
              <span class="following-toggle" tabindex="0" aria-label="View Following">
                Following: <%= profileUser.following?.length || 0 %>
              </span>
              <span class="posts-count" aria-label="Total Posts">
                Posts: <%= blogs.length %>
              </span>
              <% if (user && user._id.toString() !== profileUser._id.toString()) { %>
                <span class="common-toggle" tabindex="0" aria-label="View Common Followers">
                  Common Followers: <%= commonFollowers.length %>
                </span>
              <% } %>
            </div>
          <% } %>
        </div>
      </div>
      <div class="profile-actions">
        <% if (user && user._id.toString() !== profileUser._id.toString()) { %>
          <% if (followStatus === 'requested') { %>
            <form action="/user/cancel-follow/<%= profileUser._id %>" method="POST" style="margin:0;">
              <button class="follow-btn cancel ajax-follow-btn" type="button" data-user-id="<%= profileUser._id %>" data-follow-status="requested">
                <i class="fas fa-user-times"></i> Cancel Request
              </button>
            </form>
          <% } else { %>
            <form action="<%= followStatus === 'following' ? `/user/unfollow/${profileUser._id}` : `/user/follow/${profileUser._id}` %>" method="POST" style="margin:0;">
              <button class="follow-btn <%= followStatus === 'following' ? 'following' : '' %> ajax-follow-btn" type="button" data-user-id="<%= profileUser._id %>" data-follow-status="<%= followStatus %>">
                <i class="fas <%= followStatus === 'following' ? 'fa-user-minus' : 'fa-user-plus' %>"></i>
                <%= followStatus === 'following' ? 'Unfollow' : 'Follow' %>
              </button>
            </form>
          <% } %>
        <% } %>
      </div>
      <!-- Followers Popup -->
      <div class="popup followers-popup">
        <h3><i class="fas fa-users"></i> Followers</h3>
        <button class="close-btn close-followers" aria-label="Close Followers">
          <i class="fas fa-arrow-left"></i>
        </button>
        <% if (!profileUser.followers || profileUser.followers.length === 0) { %>
          <p style="color:var(--text-dim);">No followers yet.</p>
        <% } else { %>
          <% profileUser.followers.forEach(follower => { %>
            <div class="popup-list-user">
              <img src="<%= follower.profileImageURL || '/default-profile.png' %>" alt="<%= follower.fullname %>'s Profile Image">
              <a href="/profile/<%= follower._id %>"><%= follower.fullname %></a>
            </div>
          <% }) %>
        <% } %>
      </div>
      <!-- Following Popup -->
      <div class="popup following-popup">
        <h3><i class="fas fa-user-friends"></i> Following</h3>
        <button class="close-btn close-following" aria-label="Close Following">
          <i class="fas fa-arrow-left"></i>
        </button>
        <% if (!profileUser.following || profileUser.following.length === 0) { %>
          <p style="color:var(--text-dim);">Not following anyone yet.</p>
        <% } else { %>
          <% profileUser.following.forEach(following => { %>
            <div class="popup-list-user">
              <img src="<%= following.profileImageURL || '/default-profile.png' %>" alt="<%= following.fullname %>'s Profile Image">
              <a href="/profile/<%= following._id %>"><%= following.fullname %></a>
            </div>
          <% }) %>
        <% } %>
      </div>
      <!-- Common Followers Popup -->
      <div class="popup common-popup">
        <h3><i class="fas fa-user-group"></i> Common Followers</h3>
        <button class="close-btn close-common" aria-label="Close Common Followers">
          <i class="fas fa-arrow-left"></i>
        </button>
        <% if (commonFollowers.length === 0) { %>
          <p style="color:var(--text-dim);">No common followers.</p>
        <% } else { %>
          <% commonFollowers.forEach(follower => { %>
            <div class="popup-list-user">
              <img src="<%= follower.profileImageURL || '/default-profile.png' %>" alt="<%= follower.fullname %>'s Profile Image">
              <a href="/profile/<%= follower._id %>"><%= follower.fullname %></a>
            </div>
          <% }) %>
        <% } %>
      </div>
      <% if (canViewContent) { %>
        <div class="blogs-section">
          <h2><i class="fas fa-blog"></i> Blogs by <%= profileUser.fullname %></h2>
          <div class="blogs-list">
            <% if (blogs.length === 0) { %>
              <div style="color:var(--text-dim);font-size:1.12rem;">No blogs yet.</div>
            <% } %>
            <% blogs.forEach(blog => { %>
              <div class="blog-card" data-blog-id="<%= blog._id %>">
                <% if (blog.coverImage) { %>
                  <img src="<%= blog.coverImage %>" alt="Cover Image" class="blog-cover">
                <% } %>
                <div class="author-section">
                  <img src="<%= blog.createdBy.profileImageURL %>" alt="Profile Image" class="author-img">
                  <div class="author-details">
                    <a href="/profile/<%= blog.createdBy._id %>"><%= blog.createdBy.fullname %></a>
                    <span style="color:var(--text-dim);font-size:0.95rem;">
                      <i class="fas fa-clock"></i> <%= moment(blog.createdAt).fromNow() %>
                    </span>
                  </div>
                </div>
                <div class="blog-title">
                  <a href="/blog/<%= blog._id %>"><%= blog.title %></a>
                </div>
                <div class="blog-meta">
                  <span class="likes-count"><i class="fas fa-heart"></i> <%= blog.likes.length %> Likes</span>
                  <span class="comments-count"><i class="fas fa-comments"></i> <%= blog.totalComments %> Comments</span>
                </div>
                <div class="blog-excerpt">
                  <%= blog.body.length > 220 ? blog.body.substring(0, 220) + "..." : blog.body %>
                  <a href="/blog/<%= blog._id %>">Read more</a>
                </div>
                <div class="blog-actions">
                  <% if (user) { %>
                    <button type="button" class="action-btn ajax-like-btn <%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'liked' : '' %>" data-blog-id="<%= blog._id %>" data-liked="<%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'true' : 'false' %>">
                      <i class="fas <%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'fa-heart' : 'fa-heart-broken' %>"></i>
                      <%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'Unlike' : 'Like' %>
                    </button>
                  <% } %>
                  <div class="likes-preview" onclick="showLikes('<%= blog._id %>')">
                    <i class="fa-light fa-heart"></i>
                    <% if (blog.likes.length === 0) { %>
                      No likes yet
                    <% } else { %>
                      Liked by
                      <% blog.likes.slice(0, 2).forEach((liker, index) => { %>
                        <% if (index > 0) { %>and<% } %>
                        <a href="/profile/<%= liker._id %>">
                          <img src="<%= liker.profileImageURL %>" alt="<%= liker.fullname %>" style="width: 20px; height: 20px; border-radius: 50%; vertical-align: middle;">
                          <%= liker.fullname %>
                        </a>
                      <% }) %>
                      <% if (blog.likes.length > 2) { %>
                        and <%= blog.likes.length - 2 %> others (<%= blog.likes.length %> total)
                      <% } %>
                    <% } %>
                  </div>
                  <% let uniqueCommenters = []; let seen = new Set(); %>
                  <% blog.comments.forEach(comment => { %>
                    <% let id = comment.createdBy._id.toString(); %>
                    <% if (!seen.has(id)) { seen.add(id); uniqueCommenters.push(comment.createdBy); } %>
                    <% comment.replies.forEach(reply => { %>
                      <% let rid = reply.createdBy._id.toString(); %>
                      <% if (!seen.has(rid)) { seen.add(rid); uniqueCommenters.push(reply.createdBy); } %>
                    <% }) %>
                  <% }) %>
                  <div class="comments-preview" onclick="showComments('<%= blog._id %>')">
                    <i class="fas fa-comments"></i>
                    <% if (uniqueCommenters.length === 0) { %>
                      No comments yet
                    <% } else { %>
                      Commented by
                      <% uniqueCommenters.slice(0, 2).forEach((commenter, index) => { %>
                        <% if (index > 0) { %>and<% } %>
                        <a href="/profile/<%= commenter._id %>">
                          <img src="<%= commenter.profileImageURL %>" alt="<%= commenter.fullname %>" style="width: 20px; height: 20px; border-radius: 50%; vertical-align: middle;">
                          <%= commenter.fullname %>
                        </a>
                      <% }) %>
                      <% if (uniqueCommenters.length > 2) { %>
                        and <%= uniqueCommenters.length - 2 %> others
                      <% } %>
                      (<%= blog.totalComments %> comments)
                    <% } %>
                  </div>
                  <a href="/blog/<%= blog._id %>" class="action-btn" style="background:var(--secondary);">
                    <i class="fas fa-arrow-right"></i> Read Blog
                  </a>
                </div>
                <div class="blog-menu">
                  <button class="dots-btn" onclick="toggleMenu('<%= blog._id %>')">
                    <i class="fas fa-ellipsis-v"></i>
                  </button>
                  <div class="dropdown-menu" id="menu-<%= blog._id %>">
                    <button onclick="openShare('<%= blog._id %>')"><i class="fas fa-share"></i> Share blog</button>
                    <% if (user && blog.createdBy._id.toString() === user._id.toString()) { %>
                      <form action="/blog/<%= blog._id %>?_method=DELETE" method="POST" style="margin:0;" onsubmit="return confirm('Are you sure you want to delete this blog?');">
                        <button type="submit" class="delete-btn"><i class="fas fa-trash"></i> Delete blog</button>
                      </form>
                    <% } %>
                  </div>
                </div>
                <div id="likesModal-<%= blog._id %>" class="modal">
                  <button class="close-btn" onclick="hideLikes('<%= blog._id %>')">&times;</button>
                  <h3><i class="fas fa-heart"></i> Likes</h3>
                  <% if (blog.likes.length === 0) { %>
                    <div style="color:#b2becd;font-size:1.06rem;">No likes yet.</div>
                  <% } %>
                  <% blog.likes.forEach(liker => { %>
                    <div class="like-block">
                      <img src="<%= liker.profileImageURL %>" alt="Profile Image">
                      <div class="like-content">
                        <div class="like-author">
                          <a href="/profile/<%= liker._id %>"><%= liker.fullname %></a>
                        </div>
                        <% if (user && liker._id.toString() !== user._id.toString()) { %>
                          <% if (liker.followStatus === 'requested') { %>
                            <form action="/user/cancel-follow/<%= liker._id %>" method="POST" style="display:inline;">
                              <button class="follow-btn cancel ajax-follow-btn" type="button" data-user-id="<%= liker._id %>" data-follow-status="requested">
                                <i class="fas fa-user-times"></i> Cancel Request
                              </button>
                            </form>
                          <% } else { %>
                            <form action="<%= liker.followStatus === 'following' ? '/user/unfollow/' : '/user/follow/' %><%= liker._id %>" method="POST" style="display:inline;">
                              <button class="follow-btn <%= liker.followStatus === 'following' ? 'following' : '' %> ajax-follow-btn" type="button" data-user-id="<%= liker._id %>" data-follow-status="<%= liker.followStatus %>">
                                <i class="fas <%= liker.followStatus === 'following' ? 'fa-user-minus' : 'fa-user-plus' %>"></i>
                                <%= liker.followStatus === 'following' ? 'Unfollow' : 'Follow' %>
                              </button>
                            </form>
                          <% } %>
                        <% } %>
                      </div>
                    </div>
                  <% }) %>
                </div>
                <div id="commentsModal-<%= blog._id %>" class="modal">
                  <button class="close-btn" onclick="hideComments('<%= blog._id %>')">&times;</button>
                  <h3><i class="fas fa-comments"></i> Comments</h3>
                  <div class="comments-list">
                  <% if (blog.comments.length === 0) { %>
                    <div style="color:#b2becd;font-size:1.06rem;">No comments yet.</div>
                  <% } %>
                  <% blog.comments.forEach(comment => { %>
                    <div class="comment-block" data-comment-id="<%= comment._id %>">
                      <img src="<%= comment.createdBy.profileImageURL %>" alt="Profile Image">
                      <div class="comment-content">
                        <div class="comment-author"><a href="/profile/<%= comment.createdBy._id %>" style="color:var(--primary-color);text-decoration:none;"><%= comment.createdBy.fullname %></a></div>
                        <div class="comment-text"><%= comment.content %></div>
                        <div class="comment-time"><i class="fas fa-clock"></i> <%= moment(comment.createdAt).fromNow() %></div>
                        <div class="comment-actions">
                          <% if (user) { %>
                            <button class="comment-action-btn like-comment-btn <%= comment.likes.some(l => l._id.toString() === user._id.toString()) ? 'liked' : '' %>" data-comment-id="<%= comment._id %>">
                              <i class="fas fa-heart"></i>
                              <span class="like-count"><%= comment.likes.length %></span>
                            </button>
                            <button class="comment-action-btn reply-btn" data-comment-id="<%= comment._id %>">
                              <i class="fas fa-reply"></i> Reply
                            </button>
                          <% } %>
                          <span class="reply-count"><i class="fas fa-reply-all"></i> <%= comment.replies ? comment.replies.length : 0 %></span>
                        </div>
                        <div class="comment-replies">
                          <% if (comment.replies && comment.replies.length > 0) { %>
                            <% comment.replies.forEach(reply => { %>
                              <div class="comment-block" data-comment-id="<%= reply._id %>">
                                <img src="<%= reply.createdBy.profileImageURL %>" alt="Profile Image">
                                <div class="comment-content">
                                  <div class="comment-author"><a href="/profile/<%= reply.createdBy._id %>" style="color:var(--primary-color);text-decoration:none;"><%= reply.createdBy.fullname %></a></div>
                                  <div class="comment-text"><%= reply.content %></div>
                                  <div class="comment-time"><i class="fas fa-clock"></i> <%= moment(reply.createdAt).fromNow() %></div>
                                  <div class="comment-actions">
                                    <% if (user) { %>
                                      <button class="comment-action-btn like-comment-btn <%= reply.likes.some(l => l._id.toString() === user._id.toString()) ? 'liked' : '' %>" data-comment-id="<%= reply._id %>">
                                        <i class="fas fa-heart"></i>
                                        <span class="like-count"><%= reply.likes.length %></span>
                                      </button>
                                    <% } %>
                                  </div>
                                </div>
                                <div class="comment-menu">
                                  <button class="dots-btn" onclick="toggleCommentMenu('<%= reply._id %>')">
                                    <i class="fas fa-ellipsis-v"></i>
                                  </button>
                                  <div class="dropdown-menu" id="comment-menu-<%= reply._id %>">
                                    <% if (user && reply.createdBy._id.toString() === user._id.toString()) { %>
                                      <button class="delete-btn delete-comment-btn" data-comment-id="<%= reply._id %>"><i class="fas fa-trash"></i> Delete</button>
                                    <% } %>
                                  </div>
                                </div>
                              </div>
                            <% }) %>
                          <% } %>
                        </div>
                        <div class="reply-form-container"></div>
                      </div>
                      <div class="comment-menu">
                        <button class="dots-btn" onclick="toggleCommentMenu('<%= comment._id %>')">
                          <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <div class="dropdown-menu" id="comment-menu-<%= comment._id %>">
                          <% if (user && comment.createdBy._id.toString() === user._id.toString()) { %>
                            <button class="delete-btn delete-comment-btn" data-comment-id="<%= comment._id %>"><i class="fas fa-trash"></i> Delete</button>
                          <% } %>
                        </div>
                      </div>
                    </div>
                  <% }) %>
                  </div>
                  <% if (user) { %>
                    <form action="/comment/<%= blog._id %>" method="POST" class="post-comment-form">
                      <textarea name="content" required placeholder="Write a comment…" rows="3"
                                style="width:100%; padding:.6rem; border-radius:4px; background:#2c3e50; color:#ecf0f1; border:1px solid #34495e;"></textarea>
                      <button type="submit" style="margin-top:.5rem; padding:.5rem 1rem; background:#3498db; border:none; border-radius:4px; color:#fff; cursor:pointer;">
                        Post Comment
                      </button>
                    </form>
                  <% } %>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      <% } else { %>
        <div class="alert alert-error" style="margin-top:2em;"><i class="fa fa-lock"></i> This account is private. Only followers can see blogs.</div>
      <% } %>
    <% } else { %>
      <div class="alert alert-error">Profile not found.</div>
    <% } %>
  </div>
  <div id="shareModal">
    <button class="close-btn" onclick="closeShare()">&times;</button>
    <h3>Share Blog</h3>
    <div class="share-options">
      <button class="share-btn" id="share-facebook"><i class="fab fa-facebook"></i> Facebook</button>
      <button class="share-btn" id="share-whatsapp"><i class="fab fa-whatsapp"></i> WhatsApp</button>
      <button class="share-btn" id="copy-link"><i class="fas fa-copy"></i> Copy Link</button>
    </div>
  </div>
  <div class="popup-overlay"></div>
  <script>
    let currentBlogId = null;

    function toggleMenu(id) {
      const menu = document.getElementById(`menu-${id}`);
      if (menu) {
        menu.classList.toggle('active');
      }
    }

    function toggleCommentMenu(id) {
      const menu = document.getElementById(`comment-menu-${id}`);
      if (menu) {
        menu.classList.toggle('active');
      }
    }

    function openShare(id) {
      currentBlogId = id;
      document.getElementById('shareModal').style.display = 'block';
      const link = `${window.location.origin}/blog/${id}`;
      document.getElementById('share-facebook').onclick = () => window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(link)}`, '_blank');
      document.getElementById('share-whatsapp').onclick = () => window.open(`https://api.whatsapp.com/send?text=${encodeURIComponent(link)}`, '_blank');
      document.getElementById('copy-link').onclick = () => {
        navigator.clipboard.writeText(link);
        alert('Link copied!');
      };
    }

    function closeShare() {
      document.getElementById('shareModal').style.display = 'none';
    }

    function showLikes(id) {
      const commentsModal = document.getElementById('commentsModal-' + id);
      if (commentsModal && commentsModal.classList.contains('active')) {
        hideComments(id);
      }
      let modal = document.getElementById('likesModal-' + id);
      modal.style.display = 'block';
      setTimeout(() => {
        modal.classList.add('active');
      }, 8);
    }

    function hideLikes(id) {
      let modal = document.getElementById('likesModal-' + id);
      modal.classList.remove('active');
      setTimeout(() => {
        modal.style.display = 'none';
      }, 400);
    }
    
    function showComments(id) {
      const likesModal = document.getElementById('likesModal-' + id);
      if (likesModal && likesModal.classList.contains('active')) {
        hideLikes(id);
      }
      let modal = document.getElementById('commentsModal-' + id);
      modal.style.display = 'block';
      setTimeout(() => {
        modal.classList.add('active');
      }, 8);
    }

    function hideComments(id) {
      let modal = document.getElementById('commentsModal-' + id);
      modal.classList.remove('active');
      setTimeout(() => {
        modal.style.display = 'none';
      }, 400);
    }

    document.addEventListener('click', (e) => {
      if (!e.target.closest('.blog-menu') && !e.target.closest('.comment-menu')) {
        document.querySelectorAll('.dropdown-menu').forEach(menu => menu.classList.remove('active'));
      }
      if (e.target === document.getElementById('shareModal')) {
        closeShare();
      }
    });

    window.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        document.querySelectorAll('.dropdown-menu').forEach(menu => menu.classList.remove('active'));
        closeShare();
      }
    });

    document.addEventListener('DOMContentLoaded', () => {

      // Generic handler for AJAX forms
      const handleFormSubmit = async (e, successCallback) => {
        e.preventDefault();
        const form = e.target;
        try {
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: 'POST',
            body: new URLSearchParams(formData),
            headers: { 
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          });
          if (response.ok) {
            const data = await response.json();
            successCallback(data, form);
          } else {
            alert('Action failed. Please try again.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred. Please try again.');
        }
      };

      // AJAX for blog likes
      document.querySelectorAll('.ajax-like-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const blogId = button.dataset.blogId;
          let isLiked = button.dataset.liked === 'true';
          const likesCountSpan = button.closest('.blog-card').querySelector('.likes-count');
          const currentCount = parseInt(likesCountSpan.textContent.match(/\d+/)[0]);

          try {
            const response = await fetch(`/blog/${blogId}/like`, {
              method: 'POST',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
              }
            });
            if (response.ok) {
              const data = await response.json();
              isLiked = data.isLiked;
              button.dataset.liked = isLiked ? 'true' : 'false';
              button.classList.toggle('liked');
              likesCountSpan.textContent = `<i class="fas fa-heart"></i> ${data.likesCount} Likes`;
              button.innerHTML = `<i class="fas ${isLiked ? 'fa-heart' : 'fa-heart-broken'}"></i> ${isLiked ? 'Unlike' : 'Like'}`;
            } else {
              console.error('Failed to like blog');
            }
          } catch (error) {
            console.error('Error:', error);
          }
        });
      });

      // AJAX for follow/unfollow/cancel
      document.querySelectorAll('.ajax-follow-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const userId = button.dataset.userId;
          let currentStatus = button.dataset.followStatus;
          let endpoint = '';
          if (currentStatus === 'following') {
            endpoint = `/user/unfollow/${userId}`;
          } else if (currentStatus === 'requested') {
            endpoint = `/user/cancel-follow/${userId}`;
          } else {
            endpoint = `/user/follow/${userId}`;
          }
          try {
            const response = await fetch(endpoint, {
              method: 'POST',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
              }
            });
            if (response.ok) {
              const data = await response.json();
              currentStatus = data.newStatus;
              button.dataset.followStatus = currentStatus;
              button.classList.remove('following', 'requested', 'cancel');
              if (currentStatus === 'following') {
                button.innerHTML = '<i class="fas fa-user-minus"></i> Unfollow';
                button.classList.add('following');
              } else if (currentStatus === 'requested') {
                button.innerHTML = '<i class="fas fa-user-times"></i> Cancel Request';
                button.classList.add('requested', 'cancel');
              } else {
                button.innerHTML = '<i class="fas fa-user-plus"></i> Follow';
              }
            } else {
              console.error('Failed to update follow status');
            }
          } catch (error) {
            console.error('Error:', error);
          }
        });
      });

      // Delegated event for like comment
      document.addEventListener('click', async (e) => {
        const button = e.target.closest('.like-comment-btn');
        if (button) {
          const commentId = button.dataset.commentId;
          const isLiked = button.classList.contains('liked');
          const likeCountSpan = button.querySelector('.like-count');

          try {
            const response = await fetch(`/comment/${commentId}/like`, {
              method: isLiked ? 'DELETE' : 'POST',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
              }
            });

            if (response.ok) {
              const data = await response.json();
              button.classList.toggle('liked');
              likeCountSpan.textContent = data.likesCount;
            } else {
              console.error('Failed to like comment');
            }
          } catch (error) {
            console.error('Error:', error);
          }
        }
      });

      // Delegated event for delete comment
      document.addEventListener('click', async (e) => {
        const button = e.target.closest('.delete-comment-btn');
        if (button) {
          if (!confirm('Are you sure you want to delete this?')) return;

          const commentId = button.dataset.commentId;
          const commentBlock = button.closest('.comment-block');
          const isReply = commentBlock.parentElement.classList.contains('comment-replies');
          const repliesContainer = commentBlock.querySelector('.comment-replies');
          const replyCount = repliesContainer ? repliesContainer.querySelectorAll('.comment-block').length : 0;
          const deletedCount = isReply ? 1 : 1 + replyCount;

          try {
            const response = await fetch(`/comment/${commentId}`, {
              method: 'DELETE',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
              }
            });

            if (response.ok) {
              commentBlock.remove();

              // Update total comments count
              const modal = button.closest('.modal');
              const modalId = modal.id;
              const blogId = modalId.split('-')[1];
              const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
              const countSpan = blogCard.querySelector('.comments-count');
              const currentCountMatch = countSpan.innerHTML.match(/(\d+) Comments/);
              let currentCount = parseInt(currentCountMatch ? currentCountMatch[1] : 0);
              currentCount -= deletedCount;
              countSpan.innerHTML = `<i class="fas fa-comments"></i> ${currentCount} Comments`;

              // Check if no comments left
              const commentsList = modal.querySelector('.comments-list');
              if (commentsList.querySelectorAll('.comment-block').length === 0) {
                commentsList.innerHTML = '<div style="color:#b2becd;font-size:1.06rem;">No comments yet.</div>';
              }
            } else {
              alert('Failed to delete');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('An error occurred');
          }
        }
      });

      // Delegated event for reply btn
      document.addEventListener('click', (e) => {
        const button = e.target.closest('.reply-btn');
        if (button) {
          const commentBlock = button.closest('.comment-block');
          const replyFormContainer = commentBlock.querySelector('.reply-form-container');
          const commentId = button.dataset.commentId;

          // Remove any existing reply forms
          document.querySelectorAll('.reply-form-container').forEach(container => container.innerHTML = '');

          const replyFormHtml = `
            <form action="/comment/reply/${commentId}" method="POST" class="comment-reply-form">
              <textarea name="content" required placeholder="Write a reply…" rows="2"
                        style="width:100%; padding:.6rem; border-radius:4px; background:#2c3e50; color:#ecf0f1; border:1px solid #34495e;"></textarea>
              <button type="submit" style="margin-top:.5rem; padding:.5rem 1rem; background:#3498db; border:none; border-radius:4px; color:#fff; cursor:pointer;">
                Post Reply
              </button>
            </form>
          `;
          replyFormContainer.innerHTML = replyFormHtml;

          const newForm = replyFormContainer.querySelector('form');
          if (newForm) {
            const textarea = newForm.querySelector('textarea');
            if (textarea) textarea.focus();

            newForm.addEventListener('submit', (e) => {
              handleFormSubmit(e, (data, form) => {
                if (data.success) {
                  const newReply = data.newReply;
                  const repliesContainer = form.closest('.comment-content').querySelector('.comment-replies');

                  const replyHtml = `
                    <div class="comment-block" data-comment-id="${newReply._id}">
                      <img src="${newReply.createdBy.profileImageURL}" alt="Profile Image">
                      <div class="comment-content">
                        <div class="comment-author"><a href="/profile/${newReply.createdBy._id}" style="color:var(--primary);text-decoration:none;">${newReply.createdBy.fullname}</a></div>
                        <div class="comment-text">${newReply.content}</div>
                        <div class="comment-time"><i class="fas fa-clock"></i> Just now</div>
                        <div class="comment-actions">
                          <button class="comment-action-btn like-comment-btn" data-comment-id="${newReply._id}">
                            <i class="fas fa-heart"></i>
                            <span class="like-count">0</span>
                          </button>
                        </div>
                      </div>
                      <div class="comment-menu">
                        <button class="dots-btn" onclick="toggleCommentMenu('${newReply._id}')">
                          <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <div class="dropdown-menu" id="comment-menu-${newReply._id}">
                          <button class="delete-btn delete-comment-btn" data-comment-id="${newReply._id}"><i class="fas fa-trash"></i> Delete</button>
                        </div>
                      </div>
                    </div>
                  `;
                  repliesContainer.innerHTML += replyHtml;
                  form.remove();

                  const modal = form.closest('.modal');
                  const modalId = modal.id;
                  const blogId = modalId.split('-')[1];
                  const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
                  const countSpan = blogCard.querySelector('.comments-count');
                  const currentCountMatch = countSpan.innerHTML.match(/(\d+) Comments/);
                  let currentCount = parseInt(currentCountMatch ? currentCountMatch[1] : 0);
                  currentCount += 1;
                  countSpan.innerHTML = `<i class="fas fa-comments"></i> ${currentCount} Comments`;

                  const replyCountSpan = button.closest('.comment-actions').querySelector('.reply-count');
                  const currentReplyCount = parseInt(replyCountSpan.textContent.match(/\d+/)[0]);
                  replyCountSpan.innerHTML = `<i class="fas fa-reply-all"></i> ${currentReplyCount + 1}`;
                } else {
                  alert('Failed to post reply.');
                }
              });
            });
          }
        }
      });

      // Handle main comment form submission
      document.querySelectorAll('.post-comment-form').forEach(form => {
        form.addEventListener('submit', (e) => {
          handleFormSubmit(e, (data, form) => {
            if (data.success) {
              const newComment = data.newComment;
              const commentsList = form.closest('.modal').querySelector('.comments-list');
              const newCommentHtml = `
                <div class="comment-block" data-comment-id="${newComment._id}">
                  <img src="${newComment.createdBy.profileImageURL}" alt="Profile Image">
                  <div class="comment-content">
                    <div class="comment-author"><a href="/profile/${newComment.createdBy._id}" style="color:var(--primary);text-decoration:none;">${newComment.createdBy.fullname}</a></div>
                    <div class="comment-text">${newComment.content}</div>
                    <div class="comment-time"><i class="fas fa-clock"></i> Just now</div>
                    <div class="comment-actions">
                      <button class="comment-action-btn like-comment-btn" data-comment-id="${newComment._id}">
                        <i class="fas fa-heart"></i>
                        <span class="like-count">0</span>
                      </button>
                      <button class="comment-action-btn reply-btn" data-comment-id="${newComment._id}">
                        <i class="fas fa-reply"></i> Reply
                      </button>
                      <span class="reply-count"><i class="fas fa-reply-all"></i> 0</span>
                    </div>
                    <div class="comment-replies"></div>
                    <div class="reply-form-container"></div>
                  </div>
                  <div class="comment-menu">
                    <button class="dots-btn" onclick="toggleCommentMenu('${newComment._id}')">
                      <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <div class="dropdown-menu" id="comment-menu-${newComment._id}">
                      <button class="delete-btn delete-comment-btn" data-comment-id="${newComment._id}"><i class="fas fa-trash"></i> Delete</button>
                    </div>
                  </div>
                </div>
              `;
              commentsList.innerHTML += newCommentHtml;
              form.querySelector('textarea').value = '';

              const noCommentsDiv = commentsList.querySelector('div[style*="color:#b2becd"]');
              if (noCommentsDiv) noCommentsDiv.remove();

              const modal = form.closest('.modal');
              const modalId = modal.id;
              const blogId = modalId.split('-')[1];
              const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
              const countSpan = blogCard.querySelector('.comments-count');
              const currentCountMatch = countSpan.innerHTML.match(/(\d+) Comments/);
              let currentCount = parseInt(currentCountMatch ? currentCountMatch[1] : 0);
              currentCount += 1;
              countSpan.innerHTML = `<i class="fas fa-comments"></i> ${currentCount} Comments`;
            } else {
              alert('Failed to post comment.');
            }
          });
        });
      });

      const followersToggle = document.querySelector('.followers-toggle');
      const followingToggle = document.querySelector('.following-toggle');
      const commonToggle = document.querySelector('.common-toggle');
      const followersPopup = document.querySelector('.followers-popup');
      const followingPopup = document.querySelector('.following-popup');
      const commonPopup = document.querySelector('.common-popup');
      const closeFollowers = document.querySelector('.close-followers');
      const closeFollowing = document.querySelector('.close-following');
      const closeCommon = document.querySelector('.close-common');
      const overlay = document.querySelector('.popup-overlay');

      const showPopup = (popup) => {
        popup.style.display = 'block';
        overlay.style.display = 'block';
        setTimeout(() => {
          popup.classList.add('active');
        }, 8);
      };

      const hidePopup = (popup) => {
        popup.classList.remove('active');
        setTimeout(() => {
          popup.style.display = 'none';
          overlay.style.display = 'none';
        }, 400);
      };

      if (followersToggle) followersToggle.addEventListener('click', () => showPopup(followersPopup));
      if (closeFollowers) closeFollowers.addEventListener('click', () => hidePopup(followersPopup));

      if (followingToggle) followingToggle.addEventListener('click', () => showPopup(followingPopup));
      if (closeFollowing) closeFollowing.addEventListener('click', () => hidePopup(followingPopup));

      if (commonToggle) commonToggle.addEventListener('click', () => showPopup(commonPopup));
      if (closeCommon) closeCommon.addEventListener('click', () => hidePopup(commonPopup));

      overlay.addEventListener('click', () => {
        hidePopup(followersPopup);
        hidePopup(followingPopup);
        hidePopup(commonPopup);
      });

      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          hidePopup(followersPopup);
          hidePopup(followingPopup);
          hidePopup(commonPopup);
        }
      });
    });
  </script>
</body>
</html>
